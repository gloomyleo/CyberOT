from flask import Blueprint, request, jsonify
from datetime import datetime
from src.models.user import db
from src.models.vulnerability import Vulnerability
from src.models.asset import Asset

vulnerability_bp = Blueprint('vulnerability', __name__)

@vulnerability_bp.route('/vulnerabilities', methods=['GET'])
def get_vulnerabilities():
    """Get all vulnerabilities"""
    try:
        vulnerabilities = Vulnerability.query.all()
        return jsonify([vuln.to_dict() for vuln in vulnerabilities])
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@vulnerability_bp.route('/vulnerabilities/<int:vuln_id>', methods=['GET'])
def get_vulnerability(vuln_id):
    """Get a specific vulnerability"""
    try:
        vulnerability = Vulnerability.query.get_or_404(vuln_id)
        return jsonify(vulnerability.to_dict())
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@vulnerability_bp.route('/vulnerabilities', methods=['POST'])
def create_vulnerability():
    """Create a new vulnerability"""
    try:
        data = request.get_json()
        
        vulnerability = Vulnerability(
            cve_id=data.get('cve_id'),
            title=data.get('title'),
            description=data.get('description'),
            severity=data.get('severity'),
            cvss_score=data.get('cvss_score'),
            status=data.get('status', 'Open'),
            asset_id=data.get('asset_id'),
            discovered_date=datetime.fromisoformat(data.get('discovered_date')) if data.get('discovered_date') else datetime.utcnow(),
            remediation_notes=data.get('remediation_notes')
        )
        
        db.session.add(vulnerability)
        db.session.commit()
        
        return jsonify(vulnerability.to_dict()), 201
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@vulnerability_bp.route('/vulnerabilities/<int:vuln_id>', methods=['PUT'])
def update_vulnerability(vuln_id):
    """Update an existing vulnerability"""
    try:
        vulnerability = Vulnerability.query.get_or_404(vuln_id)
        data = request.get_json()
        
        vulnerability.cve_id = data.get('cve_id', vulnerability.cve_id)
        vulnerability.title = data.get('title', vulnerability.title)
        vulnerability.description = data.get('description', vulnerability.description)
        vulnerability.severity = data.get('severity', vulnerability.severity)
        vulnerability.cvss_score = data.get('cvss_score', vulnerability.cvss_score)
        vulnerability.status = data.get('status', vulnerability.status)
        vulnerability.asset_id = data.get('asset_id', vulnerability.asset_id)
        vulnerability.remediation_notes = data.get('remediation_notes', vulnerability.remediation_notes)
        
        if data.get('remediation_date'):
            vulnerability.remediation_date = datetime.fromisoformat(data.get('remediation_date'))
        
        db.session.commit()
        
        return jsonify(vulnerability.to_dict())
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@vulnerability_bp.route('/vulnerabilities/<int:vuln_id>', methods=['DELETE'])
def delete_vulnerability(vuln_id):
    """Delete a vulnerability"""
    try:
        vulnerability = Vulnerability.query.get_or_404(vuln_id)
        db.session.delete(vulnerability)
        db.session.commit()
        
        return jsonify({'message': 'Vulnerability deleted successfully'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@vulnerability_bp.route('/vulnerabilities/stats', methods=['GET'])
def get_vulnerability_stats():
    """Get vulnerability statistics"""
    try:
        total_vulns = Vulnerability.query.count()
        critical_vulns = Vulnerability.query.filter_by(severity='Critical').count()
        high_vulns = Vulnerability.query.filter_by(severity='High').count()
        medium_vulns = Vulnerability.query.filter_by(severity='Medium').count()
        low_vulns = Vulnerability.query.filter_by(severity='Low').count()
        
        open_vulns = Vulnerability.query.filter_by(status='Open').count()
        in_progress_vulns = Vulnerability.query.filter_by(status='In Progress').count()
        resolved_vulns = Vulnerability.query.filter_by(status='Resolved').count()
        accepted_vulns = Vulnerability.query.filter_by(status='Accepted Risk').count()
        
        return jsonify({
            'total_vulnerabilities': total_vulns,
            'by_severity': {
                'critical': critical_vulns,
                'high': high_vulns,
                'medium': medium_vulns,
                'low': low_vulns
            },
            'by_status': {
                'open': open_vulns,
                'in_progress': in_progress_vulns,
                'resolved': resolved_vulns,
                'accepted_risk': accepted_vulns
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

