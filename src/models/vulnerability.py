from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from src.models.user import db

class Vulnerability(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cve_id = db.Column(db.String(20))  # CVE identifier
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    severity = db.Column(db.String(20), nullable=False)  # Critical, High, Medium, Low
    cvss_score = db.Column(db.Float)
    status = db.Column(db.String(20), default='Open')  # Open, In Progress, Resolved, Accepted Risk
    asset_id = db.Column(db.Integer, db.ForeignKey('asset.id'), nullable=False)
    discovered_date = db.Column(db.DateTime, default=datetime.utcnow)
    remediation_date = db.Column(db.DateTime)
    remediation_notes = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationship
    asset = db.relationship('Asset', backref=db.backref('vulnerabilities', lazy=True))

    def __repr__(self):
        return f'<Vulnerability {self.title}>'

    def to_dict(self):
        return {
            'id': self.id,
            'cve_id': self.cve_id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity,
            'cvss_score': self.cvss_score,
            'status': self.status,
            'asset_id': self.asset_id,
            'asset_name': self.asset.name if self.asset else None,
            'discovered_date': self.discovered_date.isoformat() if self.discovered_date else None,
            'remediation_date': self.remediation_date.isoformat() if self.remediation_date else None,
            'remediation_notes': self.remediation_notes,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

